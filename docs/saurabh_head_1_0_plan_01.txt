--------------Head Program Flow----------

[1.0] :
  if currentFileNo and files length is equal then quit otherwise go to [2a]


[1a] :
  Prints =>   text : head lines
    [Note if filesName.length is greater than 1 then print 
    ====>filename<====]
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
  Output => 
    {numOfLine:4, lines: ['1','2','3',...,'10','11','12'],  filesName:['file1','file2'], ++crntFileNo:0}
  Input => Object : lines and numOfLines
    {numOfLine:4, lines: ['1','2','3',...,'10','11','12'],  filesName:['file1','file2'], crntFileNo:0}
  Name => giveHeadLine
  Note => [It gives lines according to given number (if it is less than given number, take all lines )]

[1b] :   
  print => text : errorText
    head.js :<fileName>: No such file or Directory
  Output => 
    {numOfLine:4, error: errorMsg  filesName:['file1','file2'], ++crntFileNo:0}
  Input => Object : filePath and error type
    {numOfLine:4, error: errorMsg  filesName:['file1','file2'], crntFileNo:0}
  Name => generateErrMsg

[2a] :
  Output => Object{lines[] or error} 
      {numOfLine:4, lines: ['1','2','3',...,'10','11','12'],  filesName:['file1','file2'], crntFileNo:0 or error : ENOENT}
  Input => Object : filePath and numOfLine
    {numOfLines:'4', filesName:['file1','file2'], crntFileNo:0}
  Name => loadLines

[2b]
  Output => Object{lines[] or error} 
      {numOfLine:4, lines: ['1','2','3',...,'10','11','12']}
  input=> stdin
  name => loadLines

[3] :
  Output : Object : userOptions
    a => {numOfLines:'4', filesName:['file1','file2'], crntFileNo:0}
          => if number id given then take number otherwise take default as  10
    b => {numOfLines:'4', filesName:['file1','file2'], crntFileNo:0, 'error type'}
  Input : Array : userArgs
    ['node', 'head.js','file1']
    ['node', 'head.js', '-n', '4', 'file1']
    ['node', 'head.js','file1', file2]
    ['node', 'head.js', '-n', '4', 'file1', file2]
  Name => parseUserOptions
  
